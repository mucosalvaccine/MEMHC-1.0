"""
The code is a Python script that processes a CSV file containing MHC (Major Histocompatibility Complex) ranking data for a set of peptides. It performs various operations such as filtering, binary conversion of Kd scores, calculating coverage, and generating output files.
Using this code you would be able to use a csv file including columnes with 'id' = prptide ID that could be peptide index and or any attribution , 'peptide' = peptide sequence in AA,'peptide_length'= lenght of peptide, 'start'= starting amino acid position in protein,  the rest f columns are the MHC alleles headings for correspondent peptides and kd(nM) score for each peptide

Here is an example of input csv file :

A part of  protein inflrunza A/Sendai/TU66/2008(H1N1)):   mkvkllvllctft
peptide sequences 8-11 mers
HLA type I supertype binding affinity Kd(nM): HLA-A01:01,HLA-B15:01,HLA-A02:01,HLA-A03:01,HLA-A24:02,HLA-A26:01,HLA-B07:02,HLA-B08:01,HLA-B27:05,HLA-B39:01,HLA-B40:01,HLA-B58:01

id	peptide	peptide_length	start	HL+D1:BM18A-A01:01	HLA-A02:01	HLA-A03:01	HLA-A24:02	HLA-A26:01	HLA-B07:02	HLA-B08:01	HLA-B15:01	HLA-B27:05	HLA-B39:01	HLA-B40:01	HLA-B58:01
Sequence1	MKVKLLVLLC	10	0	37290.2266	24836.6055	29509.4492	38739.0938	40020.6367	36766.1914	17256.5215	24450.7969	12728.3242	15750.3096	31257.5508	25245.1699
Sequence2	KVKLLVLLCT	10	1	36907.3047	11128.6582	17392.7949	41105.4844	42539.8125	36613.3633	23928.9258	23701.6504	15318.875	41876.7344	40659.1758	26157.1914
Sequence3	VKLLVLLCTF	10	2	34283.4102	11237.3135	22925.5625	12462.585	35902.1445	39646.9648	15473.2998	1620.7152	11551.9189	28880.8574	32731.2832	12265.4082
Sequence4	KLLVLLCTFT	10	3	36721.2891	809.77	14636.2637	23757.6289	42072.4766	40908.4922	23745.0391	6128.2578	20651.9316	40605.0898	38460.5391	17857.3086
Sequence5	MKVKLLVLL	9	0	36854.6211	12885.4551	32941.9688	25325.6113	28840.5781	27041.8066	6363.3306	5562.8232	2015.2975	221.9341	6652.1172	13425.2676
Sequence6	KVKLLVLLC	9	1	39514.6367	19870.7168	21113.293	34359.1758	43254.5703	30002.0195	20337.9453	23409.0742	29814.002	42286.9648	40271.2578	21055.584
Sequence7	VKLLVLLCT	9	2	43426.6641	31122.9004	40304.8242	44911.3594	46421.1836	44057.0508	29925.8262	38396.5	24670.8223	35000.0312	39652.5391	41061.0508
Sequence8	KLLVLLCTF	9	3	32766.7227	3232.1489	12777.4492	2632.0312	31552.1309	30168.6855	7479.0239	262.1248	10494.8018	26616.248	26758.3242	1871.1923
Sequence9	LLVLLCTFT	9	4	35490.0547	752.5096	27503.8984	43534.3984	41620.1484	41379.0391	24129.9023	22077.6816	38082.8867	38734.4961	40964.3008	38392.3398
Sequence10	MKVKLLVL	8	0	40852.7578	32368.1953	37788.5977	36204.8516	41780.7812	24173.5293	43.8363	14933.4746	13365.8408	2438.6748	23423.5098	31974.8438
Sequence11	KVKLLVLL	8	1	39801.2656	11798.2402	22694.5508	28408.8359	40071.7734	19822.4141	3228.2012	15724.7734	22925.5625	29279.5059	35781.9258	16349.5371
Sequence12	VKLLVLLC	8	2	45030.0938	41835.0586	43278.9023	45471.7148	47923.1641	45303.2617	34111.3672	43185.3633	34092.168	42192.3555	44068.5039	44056.1133
Sequence13	KLLVLLCT	8	3	42000.6094	9967.7715	28701.7344	43750.668	46657.8438	43381.5977	26980.4375	28189.9238	29738.6113	43927.5938	43556.0781	38446.3789
Sequence14	LLVLLCTF	8	4	37643.3125	19041.6445	33982.7852	25136.9707	35715.7812	39387.8594	8427.7598	1745.6058	37199.5547	36630.793	40426.2383	25748.3438
Sequence14	LVLLCTFT	8	5	36421.332	19980.8965	33236.9688	44220.8711	45617.0742	38217.8594	26305.9082	33364.5117	38968.2148	42882.7188	44307.5664	34264.1367

the output csv  file for above would  like :
peptide sequence	# HLA allel hits	accumulativcoverage(%)	Peptide lenght
MKVKLLVLL	1	33.33333333	9
MKVKLLVL	1	66.66666667	8
KLLVLLCTF	1	100	9



Here is a summary of the script's functionality:

It imports necessary libraries: operator, index, List, Any, matplotlib, pandas, and numpy.
It reads the MHC ranking data from a CSV file into a pandas DataFrame (df1).
It groups the rows of the DataFrame based on the 'start' column.
It creates an empty DataFrame (filtered_df) to store filtered values.
It iterates over each group and finds the minimum value of each column (excluding specific columns).
It creates a new DataFrame (filtered_group) with the same columns as the original group and sets values greater than the minimum to 1000.
It appends the filtered_group DataFrame to the filtered_df DataFrame.
It replaces the original DataFrame (df1) with the filtered DataFrame (filtered_df).
It sets a Kd threshold for peptides in nM (Kd_threshold_nM).
It converts individual Kd scores in the DataFrame to binary values (0 or 1) based on the threshold. However, this portion of the code is commented out.
It initializes a variable (relative_HLA_coverage) to store the total coverage.
It loops through each column of the DataFrame and calculates the sum of values. If the sum is greater than 0, it sets the sum value to 1; otherwise, it sets it to 0. It then adds the sum_value to the total_coverage.
It prints the relative_HLA_coverage value.
It writes the filtered DataFrame to a new CSV file named 'filtered MHC output file.csv'.
It creates a new column ('sum_weight') in the DataFrame, which represents the sum of values for each peptide.
It writes the updated DataFrame to a new CSV file named 'result_table I.csv'.
It sorts the DataFrame based on the 'sum_weight' column in descending order.
It retrieves the maximum value from the 'sum_weight' column and stores it in the variable maximum1.
It retrieves the leading peptide (highest 'sum_weight') and its length.
It calculates the lead coverage percentage based on the maximum 'sum_weight' and relative_HLA_coverage.
It finds the row index of the leading peptide.
It adds the 'sum_weight' column values for each peptide to obtain the 'sum_weight' for the entire pool.
It writes the DataFrame to a new CSV file named 'result_table II.csv'.
It initializes several lists to store the total score, lead peptide score, lead peptide, lead peptide length, row index, and cumulative coverage values.
It starts a while loop that continues until the total score is greater than 0.
Within each iteration of the loop, it selects the leading peptide and its corresponding columns from the DataFrame, updates the DataFrame by removing those columns, and recalculates the total score.
It finds the maximum value in the updated DataFrame and updates the maximum score (max_num).
It retrieves the leading peptide and its length.
It calculates the lead coverage percentage, absolute cumulative coverage, and cumulative coverage.
It adds the lead peptide score, lead peptide, lead peptide length, row index, and cumulative coverage to their respective lists.
The loop continues until the total score becomes 0.
It creates a new DataFrame (df3) using the lists obtained from the while loop. The DataFrame contains columns for the peptide sequence, the number of HLA allele hits, the cumulative coverage percentage, and the peptide length.
It writes the DataFrame (df3) to a new CSV file named 'minimal-epitop-max_coverage_MHC.csv'.
The script execution completes.
Please note that the provided code snippet is a partial script and may require additional code or data to execute properly.
"""



from operator import index
from typing import List, Any
import matplotlib
import pandas as pd
import numpy as np

df1 = pd.read_csv("MHC kd input .csv")

# Group rows by the same value in the 'start' column
grouped = df1.groupby(['start'])

# Create an empty dataframe to store the filtered values
filtered_df = pd.DataFrame(columns=df1.columns)

# Loop through each group
for group_name, group_data in grouped:
    # Get the minimum value of each column (excluding peptide_length, start, and id)
    min_values = group_data.drop(['peptide_length', 'start', 'id', 'peptide'], axis=1).min()
    # Create a new dataframe with the same columns as group_data
    filtered_group = pd.DataFrame(columns=df1.columns)
    # Copy the peptide_length, start, and id columns to the filtered_group dataframe
    filtered_group['peptide_length'] = group_data['peptide_length']
    filtered_group['start'] = group_data['start']
    filtered_group['id'] = group_data['id']
    filtered_group['peptide'] = group_data['peptide']
    # Set values greater than the minimum to 1000
    for col in min_values.index:
        filtered_group[col] = group_data[col].apply(lambda x: x if x == min_values[col] else 1000)
    # Append the filtered_group dataframe to the filtered_df dataframe
    filtered_df = pd.concat([filtered_df, filtered_group], ignore_index=True)
df1 = filtered_df
""""
# format I for going through individual Kd scores for binary conversion using a for loop(time consuming)
#defining the Kd_treshold for peptides in nM
Kd_treshold_nM = 500

for i in range(0, (df1.shape[0])):
    for j in range(0, (df1.shape[1])):
        p = df1.iloc[i][j]
        if type(p) !=  str:
            if int(p) <= Kd_treshold_nM:
                p = 1
            elif int(p) > Kd_treshold_nM:
                p = 0
        elif type(p) == str:
            p = p
        df1.iloc[i,j] = p
"""
Kd_treshold_nM = 500
# format II for going through individual Kd scores for binary conversion using np method(time efficient)
exclude_cols = ['peptide_length', 'start', 'id', 'peptide']  # list of column names to exclude
numeric_cols = df1.columns.drop(exclude_cols)  # list of numeric column names

# convert numeric columns to numeric dtype
df1[numeric_cols] = df1[numeric_cols].apply(pd.to_numeric, errors="coerce")
# Convert Kd_treshold_nM to 1 and 0, excluding NaN values

# apply the condition to the binary numeric cells where it is  a number
#df1[numeric_cols] = np.where(df1[numeric_cols] <= Kd_treshold_nM, 1, 0)
#df1[numeric_cols] = np.where(np.isan(df1[numeric_cols]) & np.where(df1[numeric_cols] <= Kd_treshold_nM, 1, 0))
df1[numeric_cols] = np.where(~np.isnan(df1[numeric_cols]), np.where(df1[numeric_cols] <= Kd_treshold_nM, 1, 0), np.nan)
print(df1)  # print the updated dataframe
# Initialize the total coverage to 0
relative_HLA_coverage = 0
# Loop through each column (excluding peptide_length, start, id, and peptide)
for col in df1.columns[4:]:
    # Sum the values of the column and set the sum value to 1 if the sum is greater than 0, and 0 otherwise
    sum_value = df1[col].sum()
    if sum_value > 0:
        sum_value = 1
    else:
        sum_value = 0

    # Add the sum_value to the total_coverage
    relative_HLA_coverage += sum_value
print(relative_HLA_coverage)

df1.to_csv('filtered MHC output file.csv', index=False)
print(df1)


#make the sume coverage value column for each peptide
df1['sum_weight'] = df1.sum(axis=1, skipna=True, numeric_only=True)
#print(df1['sum_weight'])
df1.to_csv('result_table I.csv', index=False)
total1 = (df1.shape[1])-1
#print(total1)
df1 = df1.sort_values(by='sum_weight',axis=0, ascending =False, inplace=False, kind='quicksort', na_position='last', ignore_index=False, key=None)
maximum1 = max(df1['sum_weight'])
lead_peptide = (df1.iloc[0,1])
Lead_p = len(df1.iloc[0,1])

leadcoverage = (maximum1 / relative_HLA_coverage) * 100
row_number = df1[df1['sum_weight'] == maximum1].index
df1['sum_weight'] = df1.sum(axis=1, skipna=True, numeric_only=True)
# print ('totalscore',total1)
# print('lead pep score',df1.iloc[0]['sum_weight'])
# print('lead pep',lead_peptide)
# print('leadcoverage',leadcoverage)
# print('rowindex',row_number)
# print(df1)
totalcoverage = leadcoverage
total = total1
df1.to_csv('result_table II.csv', index=False)
max_num = maximum1
#print(maximum1)
#####going to second line
#####------------------------------------------------------------------------------------------------------------------
totalscore =[total1]
#lead_pep_score = [df1.iloc[0]['sum_weight']]
lead_pep_score = [max_num]
lead_pep = [lead_peptide]
Lead_peptide_lenght = [int(Lead_p)]
rowindex = [row_number]
accuulativcoverage = [leadcoverage]
while total > 0:
    df= df1.iloc[0]
    s = ((df.index))
    g = []
    for i in range (0, len(s)):
        h = df.iloc[i]
        if type(h) != str:
            if h == 0:
             g = [s[i]] + g
    ali = ['peptide'] + g
    df1 = df1[ali]
    df1.shape[0]

    df1 = df1[1:(df1.shape[0])]
    df1['sum_weight'] = df1.sum(axis=1, skipna=True, numeric_only=True)
    total = df1['sum_weight'].sum()
    #print(total)
    df1 = df1.sort_values(by='sum_weight',axis=0, ascending =False, inplace=False, kind='quicksort', na_position='last', ignore_index=False, key=None)
    maximum = max(df1['sum_weight'])
    max_num += maximum
    lead_peptide = (df1.iloc[0,0])
    Lead_peptide_lenght += [len(df1.iloc[0, 0])]
    leadcoverage = [(maximum / total1) * 100]
    #print (max_num)
    row_number = df1[df1['sum_weight'] == maximum].index
    #calculate accumulative coverage from all the HLA allotypes (including those that are not recognized by any peptide in peptide pool)
    absolut_acumulativelcoverage = (max_num/total1) * 100
    #calculate acumulative coverage from all the recognized hits of HLA allotypes (excluding those that are not recognized by any peptide in peptide pool)
    acumulativelcoverage = (max_num/relative_HLA_coverage) * 100
    #print(max_num)
    # print('rowindex', row_number[0])
    # print('lead pep score', df1.iloc[0]['sum_weight'])
    # print('lead pep', lead_peptide)
    # print('leadcoverage', leadcoverage)
    # print ('accuulativcoverage', acumulativelcoverage)
    # print(df1)
    accuulativcoverage += [acumulativelcoverage]
    lead_pep_score += [df1.iloc[0]['sum_weight']]

    #print(lead_pep_score)
    lead_pep += [lead_peptide]
    rowindex += [(row_number[0])+1]


print(Lead_peptide_lenght)
data ={'peptide sequence':lead_pep,'# HLA allel hits': lead_pep_score, 'accumulativcoverage(%)':accuulativcoverage ,"Peptide lenght":Lead_peptide_lenght}
df3 = pd.DataFrame(data)

df3.to_csv('minimal-epitop-max_coverage_MHC.csv', index=False)
